// Modern Farmer AI using Google GenAI SDK 2.5
import { GoogleGenAI } from "@google/genai";

interface AIResponse {
  success: boolean;
  response?: string;
  error?: string;
}

interface ChatContext {
  userProfile?: {
    name?: string;
    location?: string;
    language?: string;
    farmSize?: number;
    primaryCrops?: string[];
  };
  weatherData?: {
    temperature: number;
    humidity: number;
    condition: string;
    location: string;
  };
  marketData?: {
    [crop: string]: {
      price: number;
      trend: 'up' | 'down' | 'stable';
    };
  };
  currentSeason?: 'kharif' | 'rabi' | 'summer';
}

class FarmerAIService {
  private ai: GoogleGenAI | null = null;
  private isInitialized: boolean = false;
  private maxRetries: number = 3;
  private retryDelay: number = 1000;

  constructor() {
    try {
      // Get API key from environment - you can also set it directly here
      const apiKey = process.env.EXPO_PUBLIC_GEMINI_API_KEY || 'YOUR_GEMINI_API_KEY_HERE';
      
      if (apiKey && apiKey !== 'YOUR_GEMINI_API_KEY_HERE') {
        this.ai = new GoogleGenAI({
          apiKey: apiKey
        });
        this.isInitialized = true;
        console.log('‚úÖ Farmer AI (Gemini 2.5) initialized successfully');
      } else {
        console.warn('‚ö†Ô∏è Gemini API key not provided. Using fallback responses.');
        console.log('üí° Set EXPO_PUBLIC_GEMINI_API_KEY in your .env file');
      }
    } catch (error) {
      console.error('‚ùå Failed to initialize Farmer AI:', error);
      this.isInitialized = false;
    }
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Generate farmer persona prompt for different languages
  private generateFarmerPersona(context?: ChatContext): string {
    const userInfo = context?.userProfile;
    const weatherInfo = context?.weatherData;
    const marketInfo = context?.marketData;
    const userLanguage = userInfo?.language || 'English';
    const userLocation = userInfo?.location || 'India';
    
    let persona = `You are Ram, a 45-year-old experienced farmer from ${userLocation}. You have been farming for 25 years and speak like a friendly, wise farmer talking to another farmer friend.

PERSONALITY:
- Speak in simple, practical language
- Share experiences: "I also faced this problem..."
- Give solutions that can be done at home
- Be warm and encouraging
- Use farming terms farmers understand
- Keep answers short (2-3 sentences)

LANGUAGE STYLE:`;

    // Language-specific persona
    switch (userLanguage.toLowerCase()) {
      case 'hindi':
        persona += `
- Respond in simple Hindi
- Use words like "‡§≠‡§æ‡§à", "‡§Ø‡§æ‡§∞", "‡§Ö‡§∞‡•á"
- Example tone: "‡§Ö‡§∞‡•á ‡§≠‡§æ‡§à, ‡§Æ‡•à‡§Ç‡§®‡•á ‡§≠‡•Ä ‡§Ø‡§π ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§¶‡•á‡§ñ‡•Ä ‡§π‡•à‡•§ ‡§ê‡§∏‡§æ ‡§ï‡§∞‡•ã..."
- Use farming Hindi terms farmers know
- Add helpful emojis`;
        break;
        
      case 'marathi':
        persona += `
- Respond in simple Marathi
- Use words like "‡§≠‡§æ‡§ä", "‡§Ö‡§∞‡•á", "‡§¨‡§ò"
- Example tone: "‡§Ö‡§∞‡•á ‡§≠‡§æ‡§ä, ‡§Æ‡§≤‡§æ ‡§™‡§£ ‡§π‡•Ä‡§ö ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§≤‡•Ä ‡§π‡•ã‡§§‡•Ä‡•§ ‡§Ö‡§∏‡§Ç ‡§ï‡§∞‡§æ..."
- Use farming Marathi terms farmers know
- Add helpful emojis`;
        break;
        
      case 'gujarati':
        persona += `
- Respond in simple Gujarati
- Use words like "‡™≠‡™æ‡™à", "‡™Ö‡™∞‡´á", "‡™ú‡´Å‡™ì"
- Example tone: "‡™Ö‡™∞‡´á ‡™≠‡™æ‡™à, ‡™Æ‡™®‡´á ‡™™‡™£ ‡™Ü ‡™∏‡™Æ‡™∏‡´ç‡™Ø‡™æ ‡™Ü‡™µ‡´Ä ‡™π‡™§‡´Ä‡•§ ‡™Ü‡™µ‡´Å‡™Ç ‡™ï‡™∞‡´ã..."
- Use farming Gujarati terms farmers know
- Add helpful emojis`;
        break;
        
      case 'punjabi':
        persona += `
- Respond in simple Punjabi
- Use words like "‡®µ‡©Ä‡®∞", "‡®Ø‡®æ‡®∞", "‡®Ö‡®∞‡©á"
- Example tone: "‡®Ö‡®∞‡©á ‡®µ‡©Ä‡®∞, ‡®Æ‡©à‡®®‡©Ç‡©∞ ‡®µ‡©Ä ‡®á‡®π ‡®∏‡®Æ‡©±‡®∏‡®ø‡®Ü ‡®Ü‡®à ‡®∏‡©Ä‡•§ ‡®á‡®π ‡®ï‡®∞‡©ã..."
- Use farming Punjabi terms farmers know
- Add helpful emojis`;
        break;
        
      case 'tamil':
        persona += `
- Respond in simple Tamil
- Use words like "‡Æ§‡ÆÆ‡Øç‡Æ™‡Æø", "‡ÆÆ‡Æö‡Øç‡Æö‡Ææ‡Æ©‡Øç", "‡ÆÖ‡Æ∞‡Øá"
- Example tone: "‡ÆÖ‡Æ∞‡Øá ‡Æ§‡ÆÆ‡Øç‡Æ™‡Æø, ‡Æé‡Æ©‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ®‡Øç‡Æ§‡Æ™‡Øç ‡Æ™‡Æø‡Æ∞‡Æö‡Øç‡Æö‡Æ©‡Øà ‡Æµ‡Æ®‡Øç‡Æ§‡Æ§‡ØÅ‡•§ ‡Æá‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç..."
- Use farming Tamil terms farmers know
- Add helpful emojis`;
        break;
        
      case 'bengali':
        persona += `
- Respond in simple Bengali
- Use words like "‡¶≠‡¶æ‡¶á", "‡¶Ü‡¶∞‡ßá", "‡¶¶‡ßá‡¶ñ‡ßã"
- Example tone: "‡¶Ü‡¶∞‡ßá ‡¶≠‡¶æ‡¶á, ‡¶Ü‡¶Æ‡¶æ‡¶∞‡¶ì ‡¶è‡¶á ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡¶≤‡•§ ‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡ßÅ‡¶®..."
- Use farming Bengali terms farmers know
- Add helpful emojis`;
        break;
        
      default: // English
        persona += `
- Respond in simple English
- Use words like "friend", "brother", "hey"
- Example tone: "Hey friend, I also had this problem. Do this..."
- Use simple farming terms
- Add helpful emojis`;
    }

    persona += `

CURRENT CONTEXT:`;

    // Add weather context
    if (weatherInfo) {
      persona += `
Weather: ${weatherInfo.temperature}¬∞C, ${weatherInfo.condition}, Humidity: ${weatherInfo.humidity}%
Give weather-specific advice if relevant.`;
    }

    // Add market context
    if (marketInfo) {
      const prices = Object.entries(marketInfo).slice(0, 3).map(([crop, data]) => 
        `${crop}: ‚Çπ${data.price}/quintal (${data.trend === 'up' ? 'Rising ‚ÜóÔ∏è' : data.trend === 'down' ? 'Falling ‚ÜòÔ∏è' : 'Stable ‚Üí'})`
      ).join(', ');
      persona += `
Market prices: ${prices}
Give market advice if asked.`;
    }

    persona += `

RESPONSE RULES:
1. Keep answers 2-3 sentences max
2. Give ONE main action step
3. Share personal experience when possible
4. Use emojis to make it friendly
5. Be practical - solutions farmers can do today
6. If you don't know something, admit it and suggest who to ask

TOPICS I HELP WITH:
üåæ Crop problems (diseases, growth issues)
üêõ Pest control (natural and chemical solutions)
üåßÔ∏è Weather advice (what to do in rain/sun/cold)
üí∞ Market prices (when to sell, where to sell)
üèõÔ∏è Government schemes (PM-KISAN, insurance, subsidies)
üíß Irrigation (when to water, how much)
üå± Fertilizers (organic vs chemical, timing)
üöú Farm equipment (basic maintenance, usage)

Remember: I'm Ram, a farmer friend helping another farmer!`;

    return persona;
  }

  // Main chat function with farmer personality
  async chat(message: string, context?: ChatContext): Promise<AIResponse> {
    if (!this.isInitialized || !this.ai) {
      return {
        success: false,
        error: 'API not initialized',
        response: this.getFallbackResponse(message, context?.userProfile?.language)
      };
    }

    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        const persona = this.generateFarmerPersona(context);
        
        // Prepare the conversation
        const fullPrompt = `${persona}

User Question: ${message}

Ram's Response:`;

        // Use Gemini 2.5 Flash model
        const response = await this.ai.models.generateContent({
          model: "gemini-2.5-flash",
          contents: fullPrompt,
        });

        const aiResponse = response.text;
        
        if (aiResponse) {
          return {
            success: true,
            response: aiResponse.trim()
          };
        } else {
          throw new Error('Empty response from AI');
        }

      } catch (error: any) {
        console.error(`‚ùå Farmer AI attempt ${attempt} failed:`, error);

        // Check if it's a quota/billing error
        if (error.message?.includes('quota') || error.message?.includes('billing')) {
          return {
            success: false,
            error: 'API quota exceeded',
            response: this.getFallbackResponse(message, context?.userProfile?.language)
          };
        }

        if (attempt === this.maxRetries) {
          return {
            success: false,
            error: `Failed after ${this.maxRetries} attempts: ${error.message}`,
            response: this.getFallbackResponse(message, context?.userProfile?.language)
          };
        }

        // Wait before retrying
        await this.sleep(this.retryDelay * attempt);
      }
    }

    return {
      success: false,
      error: 'Max retries exceeded',
      response: this.getFallbackResponse(message, context?.userProfile?.language)
    };
  }

  // Enhanced chat with conversation history
  async chatWithHistory(
    userQuery: string, 
    context?: ChatContext,
    conversationHistory?: Array<{ role: 'user' | 'assistant', content: string }>
  ): Promise<AIResponse> {
    if (!this.isInitialized || !this.ai) {
      return {
        success: false,
        error: 'API not initialized',
        response: this.getFallbackResponse(userQuery, context?.userProfile?.language)
      };
    }

    try {
      const persona = this.generateFarmerPersona(context);
      
      // Build conversation with history
      let conversation = persona + '\n\nConversation:\n';
      
      // Add recent history (last 4 messages)
      if (conversationHistory && conversationHistory.length > 0) {
        const recentHistory = conversationHistory.slice(-4);
        recentHistory.forEach(msg => {
          conversation += `${msg.role === 'user' ? 'Farmer Friend' : 'Ram'}: ${msg.content}\n`;
        });
      }
      
      conversation += `Farmer Friend: ${userQuery}\nRam: `;

      const response = await this.ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: conversation,
      });

      const aiResponse = response.text;
      
      if (aiResponse) {
        return {
          success: true,
          response: aiResponse.trim()
        };
      } else {
        throw new Error('Empty response from AI');
      }

    } catch (error: any) {
      console.error('Farmer AI Error:', error);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred',
        response: this.getFallbackResponse(userQuery, context?.userProfile?.language)
      };
    }
  }

  // Intelligent fallback responses when AI is not available
  private getFallbackResponse(query: string, language?: string): string {
    const lowerQuery = query.toLowerCase();
    
    // Weather related queries
    if (lowerQuery.includes('weather') || lowerQuery.includes('‡§Æ‡•å‡§∏‡§Æ') || lowerQuery.includes('‡§π‡§µ‡§æ‡§Æ‡§æ‡§®') || 
        lowerQuery.includes('rain') || lowerQuery.includes('‡§¨‡§æ‡§∞‡§ø‡§∂') || lowerQuery.includes('‡§™‡§æ‡§ä‡§∏')) {
      if (language === 'hindi') {
        return "üå§Ô∏è ‡§Ö‡§∞‡•á ‡§≠‡§æ‡§à ‡§∞‡§æ‡§Æ ‡§Ø‡§π‡§æ‡§Å! ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•à‡§Ç ‡§ï‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç - ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§ñ‡•á‡§§ ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§®‡•Ä ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§Æ ‡§ï‡§∞‡•ã‡•§ ‡§Ö‡§ó‡§∞ ‡§ß‡•Ç‡§™ ‡§§‡•á‡§ú ‡§π‡•à ‡§§‡•ã ‡§∂‡§æ‡§Æ ‡§ï‡•ã ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§®‡§æ‡•§ ‡§Æ‡•å‡§∏‡§Æ ‡§ê‡§™ ‡§≠‡•Ä ‡§ö‡•á‡§ï ‡§ï‡§∞‡§§‡•á ‡§∞‡§π‡§®‡§æ! üåßÔ∏èüåû";
      }
      if (language === 'marathi') {
        return "üå§Ô∏è ‡§Ö‡§∞‡•á ‡§≠‡§æ‡§ä ‡§∞‡§æ‡§Æ‡§∞‡§æ‡§µ ‡§¨‡•ã‡§≤‡§§‡•ã! ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®‡§æ‡§∏‡§æ‡§†‡•Ä ‡§∏‡§æ‡§Ç‡§ó‡§§‡•ã - ‡§™‡§æ‡§µ‡§∏‡§æ‡§Ü‡§ß‡•Ä ‡§∂‡•á‡§§‡§æ‡§§ ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§®‡§ø‡§ö‡§∞‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§ø‡§§ ‡§ï‡§∞‡§æ. ‡§â‡§®‡•ç‡§π‡§æ‡§≥‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ‡§ï‡§æ‡§≥‡•Ä ‡§™‡§æ‡§£‡•Ä ‡§¶‡•ç‡§Ø‡§æ. ‡§µ‡•á‡§¶‡§∞ ‡§Ö‡•Ö‡§™ ‡§™‡§£ ‡§¨‡§ò‡§§ ‡§∞‡§æ‡§π‡§æ! üåßÔ∏èüåû";
      }
      return "üå§Ô∏è Hey friend, Ram here! For weather, I say - arrange drainage before rains. If sun is strong, water in evening. Keep checking weather app too! üåßÔ∏èüåû";
    }
    
    // Pest control queries
    if (lowerQuery.includes('pest') || lowerQuery.includes('‡§ï‡•Ä‡§ü') || lowerQuery.includes('insects') || 
        lowerQuery.includes('bugs') || lowerQuery.includes('‡§ï‡§ø‡§°‡•á')) {
      if (language === 'hindi') {
        return "üêõ ‡§≠‡§æ‡§à, ‡§ï‡•Ä‡§ü‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•à‡§Ç ‡§Ø‡•á ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç - ‡§®‡•Ä‡§Æ ‡§ï‡§æ ‡§§‡•á‡§≤ ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§ï‡§∞‡•ã, ‡§§‡•Å‡§≤‡§∏‡•Ä ‡§î‡§∞ ‡§ó‡•á‡§Ç‡§¶‡§æ ‡§´‡•Ç‡§≤ ‡§≤‡§ó‡§æ‡§ì ‡§ñ‡•á‡§§ ‡§ï‡•á ‡§ï‡§ø‡§®‡§æ‡§∞‡•á‡•§ ‡§∞‡•ã‡§ú ‡§∏‡•Å‡§¨‡§π ‡§ñ‡•á‡§§ ‡§¶‡•á‡§ñ‡§®‡§æ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à! ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§®‡•Å‡§∏‡•ç‡§ñ‡•á ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•á! üåø";
      }
      if (language === 'marathi') {
        return "üêõ ‡§≠‡§æ‡§ä, ‡§ï‡§ø‡§°‡•ç‡§Ø‡§æ‡§Ç‡§™‡§æ‡§∏‡•Ç‡§® ‡§¨‡§ö‡§æ‡§µ‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡•Ä ‡§π‡•á ‡§ï‡§∞‡§§‡•ã - ‡§ï‡§°‡•Å‡§≤‡§ø‡§Ç‡§¨‡§æ‡§ö‡•á ‡§§‡•á‡§≤ ‡§´‡§µ‡§æ‡§∞‡§æ, ‡§§‡•Å‡§≥‡§∏ ‡§Ü‡§£‡§ø ‡§ù‡•á‡§Ç‡§°‡•Ç ‡§∂‡•á‡§§‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§ï‡§°‡•á‡§≤‡§æ ‡§≤‡§æ‡§µ‡§æ‡•§ ‡§∞‡•ã‡§ú ‡§∏‡§ï‡§æ‡§≥‡•Ä ‡§∂‡•á‡§§ ‡§¨‡§ò‡§£‡•á ‡§ó‡§∞‡§ú‡•á‡§ö‡•á! ‡§®‡•à‡§∏‡§∞‡•ç‡§ó‡§ø‡§ï ‡§â‡§™‡§æ‡§Ø ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ! üåø";
      }
      return "üêõ Friend, for pests I do this - spray neem oil, plant tulsi and marigold at field edges. Daily morning field check needed! Natural remedies are best! üåø";
    }
    
    // Fertilizer/soil queries
    if (lowerQuery.includes('fertilizer') || lowerQuery.includes('‡§ñ‡§æ‡§¶') || lowerQuery.includes('soil') || 
        lowerQuery.includes('‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä') || lowerQuery.includes('‡§Æ‡§æ‡§§‡•Ä')) {
      if (language === 'hindi') {
        return "üå± ‡§∞‡§æ‡§Æ ‡§ï‡§æ ‡§§‡§ú‡•Å‡§∞‡•ç‡§¨‡§æ - ‡§ï‡•á‡§Æ‡§ø‡§ï‡§≤ ‡§ñ‡§æ‡§¶ ‡§ï‡§Æ ‡§ï‡§∞‡•ã, ‡§ï‡§Ç‡§™‡•ã‡§∏‡•ç‡§ü ‡§î‡§∞ ‡§ó‡•ã‡§¨‡§∞ ‡§ñ‡§æ‡§¶ ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§°‡§æ‡§≤‡•ã‡•§ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§∏‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§ú‡§∞‡•Ç‡§∞ ‡§ï‡§∞‡§æ‡§ì‡•§ ‡§π‡§∞‡•Ä ‡§ñ‡§æ‡§¶ ‡§≠‡•Ä ‡§¨‡•ã‡§®‡§æ ‡§´‡§æ‡§Ø‡§¶‡•á‡§Æ‡§Ç‡§¶ ‡§π‡•à! üíö";
      }
      if (language === 'marathi') {
        return "üå± ‡§∞‡§æ‡§Æ‡§∞‡§æ‡§µ‡§æ‡§ö‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ - ‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§ñ‡§§ ‡§ï‡§Æ‡•Ä ‡§ï‡§∞‡§æ, ‡§ï‡§Ç‡§™‡•ã‡§∏‡•ç‡§ü ‡§Ü‡§£‡§ø ‡§∂‡•á‡§£‡§ñ‡§§ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§ü‡§æ‡§ï‡§æ‡•§ ‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§§‡§™‡§æ‡§∏‡§£‡•Ä ‡§µ‡§∞‡•ç‡§∑‡§æ‡§§‡•Ç‡§® ‡§è‡§ï‡§¶‡§æ ‡§®‡§ï‡•ç‡§ï‡•Ä ‡§ï‡§∞‡§æ‡•§ ‡§π‡§ø‡§∞‡§µ‡•Ä ‡§ñ‡§§ ‡§™‡§£ ‡§ö‡§æ‡§Ç‡§ó‡§≤‡•Ä! üíö";
      }
      return "üå± Ram's experience - reduce chemical fertilizer, use more compost and cow dung. Test soil once a year. Green manure also good! üíö";
    }
    
    // Market/price queries
    if (lowerQuery.includes('market') || lowerQuery.includes('price') || lowerQuery.includes('‡§¨‡§æ‡§ú‡§æ‡§∞') || 
        lowerQuery.includes('‡§≠‡§æ‡§µ') || lowerQuery.includes('‡§ï‡§ø‡§Ç‡§Æ‡§§')) {
      if (language === 'hindi') {
        return "üí∞ ‡§Ø‡§æ‡§∞, ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•à‡§Ç ‡§ï‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç - ‡§´‡§∏‡§≤ ‡§¨‡•á‡§ö‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á 3-4 ‡§Æ‡§Ç‡§°‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≠‡§æ‡§µ ‡§¶‡•á‡§ñ ‡§≤‡•ã‡•§ ‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§¶‡§æ‡§Æ ‡§Æ‡§ø‡§≤‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§ï‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§π‡•ã ‡§§‡•ã ‡§•‡•ã‡§°‡§º‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡§®‡§æ! üìà";
      }
      if (language === 'marathi') {
        return "üí∞ ‡§Ø‡§æ‡§∞, ‡§¨‡§æ‡§ú‡§æ‡§∞‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡•Ä ‡§∏‡§æ‡§Ç‡§ó‡§§‡•ã - ‡§™‡•Ä‡§ï ‡§µ‡§ø‡§ï‡§£‡•ç‡§Ø‡§æ‡§Ü‡§ß‡•Ä 3-4 ‡§Æ‡§Ç‡§°‡•Ä‡§Ç‡§ö‡•á ‡§≠‡§æ‡§µ ‡§¨‡§ò‡§æ‡•§ ‡§∏‡§£‡§æ‡§∏‡•Å‡§¶‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§µ‡•á‡§≥‡•Ä ‡§ö‡§æ‡§Ç‡§ó‡§≤‡•á ‡§¶‡§∞ ‡§Æ‡§ø‡§≥‡§§‡§æ‡§§‡•§ ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§•‡•ã‡§°‡•Ä ‡§µ‡§æ‡§ü ‡§¨‡§ò‡§æ! üìà";
      }
      return "üí∞ Friend, for market I say - check prices in 3-4 markets before selling. Good rates during festivals. If you have storage, wait a bit! üìà";
    }
    
    // Irrigation queries
    if (lowerQuery.includes('irrigation') || lowerQuery.includes('water') || lowerQuery.includes('‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à') || 
        lowerQuery.includes('‡§™‡§æ‡§®‡•Ä') || lowerQuery.includes('‡§∏‡§ø‡§Ç‡§ö‡§®')) {
      if (language === 'hindi') {
        return "üíß ‡§≠‡§æ‡§à, ‡§™‡§æ‡§®‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•á‡§∞‡§æ ‡§´‡§æ‡§∞‡•ç‡§Æ‡•Ç‡§≤‡§æ - ‡§∏‡•Å‡§¨‡§π ‡§Ø‡§æ ‡§∂‡§æ‡§Æ ‡§ï‡•ã ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§®‡§æ, ‡§¶‡•ã‡§™‡§π‡§∞ ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§°‡•ç‡§∞‡§ø‡§™ ‡§á‡§∞‡§ø‡§ó‡•á‡§∂‡§® ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ‡•§ ‡§Æ‡§≤‡•ç‡§ö‡§ø‡§Ç‡§ó ‡§ï‡§∞‡•ã ‡§™‡§æ‡§®‡•Ä ‡§¨‡§ö‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è! üåæ";
      }
      if (language === 'marathi') {
        return "üíß ‡§≠‡§æ‡§ä, ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§æ‡§ù‡•á ‡§´‡•â‡§∞‡•ç‡§Æ‡•ç‡§Ø‡•Å‡§≤‡§æ - ‡§∏‡§ï‡§æ‡§≥‡•Ä ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ‡§ï‡§æ‡§≥‡•Ä ‡§™‡§æ‡§£‡•Ä ‡§¶‡•ç‡§Ø‡§æ, ‡§¶‡•Å‡§™‡§æ‡§∞‡•Ä ‡§®‡§ï‡•ã‡•§ ‡§°‡•ç‡§∞‡§ø‡§™ ‡§∏‡§ø‡§∏‡•ç‡§ü‡•Ä‡§Æ ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ‡•§ ‡§Æ‡§≤‡•ç‡§ö‡§ø‡§Ç‡§ó ‡§ï‡§∞‡§æ ‡§™‡§æ‡§£‡•Ä ‡§µ‡§æ‡§ö‡§µ‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä! üåæ";
      }
      return "üíß Brother, for water my formula - water in morning or evening, not afternoon. Drip irrigation is best. Do mulching to save water! üåæ";
    }
    
    // Default greeting/help
    if (lowerQuery.includes('hello') || lowerQuery.includes('hi') || lowerQuery.includes('help') || 
        lowerQuery.includes('‡§®‡§Æ‡§∏‡•ç‡§§‡•á') || lowerQuery.includes('‡§π‡•à‡§≤‡•ã') || lowerQuery.includes('‡§∏‡§π‡§æ‡§Ø‡§§‡§æ') ||
        lowerQuery.length < 10) {
      if (language === 'hindi') {
        return "ü§ó ‡§Ö‡§∞‡•á ‡§≠‡§æ‡§à, ‡§∞‡§æ‡§Æ ‡§ï‡§ø‡§∏‡§æ‡§® ‡§Ø‡§π‡§æ‡§Å! 25 ‡§∏‡§æ‡§≤ ‡§ï‡§æ ‡§§‡§ú‡•Å‡§∞‡•ç‡§¨‡§æ ‡§π‡•à ‡§Æ‡•á‡§∞‡§æ‡•§ ‡§¨‡•ã‡§≤‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à? ‡§ñ‡•á‡§§‡•Ä-‡§¨‡§æ‡§°‡§º‡•Ä, ‡§Æ‡•å‡§∏‡§Æ, ‡§ï‡•Ä‡§ü-‡§™‡§§‡§Ç‡§ó‡•á, ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§≠‡§æ‡§µ, ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à - ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã ‡§Ø‡§æ‡§∞! ‡§Æ‡•à‡§Ç ‡§∏‡§¨ ‡§∏‡§ø‡§ñ‡§æ‡§§‡§æ ‡§π‡•Ç‡§Å! üåæüë®‚Äçüåæ";
      }
      if (language === 'marathi') {
        return "ü§ó ‡§Ö‡§∞‡•á ‡§≠‡§æ‡§ä, ‡§∞‡§æ‡§Æ‡§∞‡§æ‡§µ ‡§∂‡•á‡§§‡§ï‡§∞‡•Ä ‡§Ø‡•á‡§•‡•á! 25 ‡§µ‡§∞‡•ç‡§∑‡§æ‡§Ç‡§ö‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§Ü‡§π‡•á ‡§Æ‡§æ‡§ù‡§æ‡•§ ‡§∏‡§æ‡§Ç‡§ó‡§æ ‡§ï‡§æ‡§Ø ‡§Ö‡§°‡§ö‡§£ ‡§Ü‡§π‡•á? ‡§∂‡•á‡§§‡•Ä-‡§™‡§ø‡§ï‡§µ‡§æ‡§°‡•Ä, ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®, ‡§ï‡§ø‡§°‡•á-‡§™‡§§‡§Ç‡§ó, ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§≠‡§æ‡§µ, ‡§∏‡§ø‡§Ç‡§ö‡§® - ‡§ï‡§æ‡§π‡•Ä‡§π‡•Ä ‡§µ‡§ø‡§ö‡§æ‡§∞‡•Ç ‡§∂‡§ï‡§§‡§æ! ‡§Æ‡•Ä ‡§∏‡§ó‡§≥‡§Ç ‡§∂‡§ø‡§ï‡§µ‡§§‡•ã! üåæüë®‚Äçüåæ";
      }
      if (language === 'gujarati') {
        return "ü§ó ‡™Ö‡™∞‡´á ‡™≠‡™æ‡™à, ‡™∞‡™æ‡™Æ‡™≠‡™æ‡™à ‡™ñ‡´á‡™°‡´Ç‡™§ ‡™Ö‡™π‡´Ä‡™Ç! 25 ‡™µ‡™∞‡´ç‡™∑‡™®‡´ã ‡™Ö‡™®‡´Å‡™≠‡™µ ‡™õ‡´á ‡™Æ‡™æ‡™∞‡´ã‡•§ ‡™ï‡™π‡´ã ‡™∂‡´Å‡™Ç ‡™∏‡™Æ‡™∏‡´ç‡™Ø‡™æ ‡™õ‡´á? ‡™ñ‡´á‡™§‡´Ä-‡™µ‡™æ‡™°‡´Ä, ‡™π‡™µ‡™æ‡™Æ‡™æ‡™®, ‡™ï‡´Ä‡™°‡™æ-‡™™‡™§‡™Ç‡™ó, ‡™¨‡™ú‡™æ‡™∞ ‡™≠‡™æ‡™µ, ‡™∏‡™ø‡™Ç‡™ö‡™æ‡™à - ‡™ï‡™Ç‡™à‡™™‡™£ ‡™™‡´Ç‡™õ‡´Ä ‡™∂‡™ï‡´ã! ‡™π‡´Å‡™Ç ‡™¨‡™ß‡´Å‡™Ç ‡™∂‡´Ä‡™ñ‡™µ‡´Ä‡™∂! üåæüë®‚Äçüåæ";
      }
      return "ü§ó Hey friend! Ram Farmer here! 25 years of experience. Tell me, what's the problem? Farming, weather, pests, market prices, irrigation - ask anything! I'll teach you everything! üåæüë®‚Äçüåæ";
    }
    
    return "üåæ Ram here! Ask me about farming problems - crops, pests, weather, prices, irrigation. I'm here to help with simple solutions! üë®‚Äçüåæ";
  }

  // Test API connection
  async testConnection(): Promise<boolean> {
    try {
      if (!this.isInitialized || !this.ai) {
        console.log('Farmer AI not initialized, using fallback responses');
        return false;
      }

      const response = await this.ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: "Say hello in one word",
      });
      
      if (response.text) {
        console.log(`‚úÖ Farmer AI connection successful`);
        return true;
      }
      
      return false;
    } catch (error: any) {
      console.error('Farmer AI connection test failed:', error);
      return false;
    }
  }

  // Quick responses for common farmer queries
  getQuickResponse(queryType: string, context?: ChatContext): string {
    const language = context?.userProfile?.language;
    
    switch (queryType) {
      case 'weather_advice':
        return context?.weatherData ? 
          `üå§Ô∏è Today: ${context.weatherData.temperature}¬∞C, ${context.weatherData.condition}. ${context.weatherData.temperature > 35 ? 'Too hot - water crops early morning! üåÖ' : context.weatherData.temperature < 10 ? 'Cold - protect crops at night! üåô' : 'Good weather for farming! üòä'}` :
          "üå§Ô∏è Check weather section for today's conditions and farming advice.";
          
      case 'market_prices':
        return language === 'hindi' ? 
          "üí∞ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•á ‡§≠‡§æ‡§µ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•ã‡•§ ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§¶‡§æ‡§Æ ‡§™‡§∞ ‡§¨‡•á‡§ö‡§®‡§æ ‡§î‡§∞ ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•ã ‡§§‡•ã ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡§®‡§æ!" :
          "üí∞ Check marketplace section. Sell when prices are good and store if needed!";
        
      case 'government_schemes':
        return language === 'hindi' ?
          "üèõÔ∏è ‡§∏‡•ç‡§ï‡•Ä‡§Æ ‡§∏‡•á‡§ï‡•ç‡§∂‡§® ‡§¶‡•á‡§ñ‡•ã‡•§ PM-KISAN, ‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ, ‡§Æ‡•É‡§¶‡§æ ‡§π‡•á‡§≤‡•ç‡§• ‡§ï‡§æ‡§∞‡•ç‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•ã!" :
          "üèõÔ∏è Check schemes section. Apply for PM-KISAN, crop insurance, soil health card!";
        
      case 'pest_control':
        return language === 'hindi' ?
          "üêõ ‡§∏‡•Å‡§¨‡§π-‡§∏‡•Å‡§¨‡§π ‡§®‡•Ä‡§Æ ‡§ï‡§æ ‡§§‡•á‡§≤ ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§ï‡§∞‡•ã‡•§ 5ml ‡§™‡•ç‡§∞‡§§‡§ø ‡§≤‡•Ä‡§ü‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡§ï‡§∞‡•§ ‡§π‡§´‡•ç‡§§‡•á ‡§Æ‡•á‡§Ç ‡§¶‡•ã ‡§¨‡§æ‡§∞!" :
          "üêõ Spray neem oil early morning. Mix 5ml per liter water. Twice a week!";
        
      default:
        return language === 'hindi' ?
          "ü§ñ ‡§™‡•Ç‡§õ‡•ã ‡§Ø‡§æ‡§∞: ‡§´‡§∏‡§≤, ‡§ï‡•Ä‡§ü, ‡§Æ‡•å‡§∏‡§Æ, ‡§≠‡§æ‡§µ, ‡§Ø‡§æ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•ç‡§ï‡•Ä‡§Æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç! ‡§∏‡§¨ ‡§∏‡§ø‡§ñ‡§æ‡§ä‡§Ç‡§ó‡§æ! üåæ" :
          "ü§ñ Ask me friend: crops, pests, weather, prices, or government schemes! I'll teach everything! üåæ";
    }
  }
}

// Singleton instance
export const farmerAI = new FarmerAIService();

// Export types and service
export type { AIResponse, ChatContext };
export default farmerAI;