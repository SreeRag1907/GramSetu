// Modern Gemini AI using the new @google/genai SDK
import { GoogleGenAI } from "@google/genai";

interface AIResponse {
  success: boolean;
  response?: string;
  error?: string;
}

interface ChatContext {
  userProfile?: {
    name?: string;
    location?: string;
    language?: string;
    farmSize?: number;
    primaryCrops?: string[];
  };
  weatherData?: {
    temperature: number;
    humidity: number;
    condition: string;
    location: string;
  };
  marketData?: {
    [crop: string]: {
      price: number;
      trend: 'up' | 'down' | 'stable';
    };
  };
  currentSeason?: 'kharif' | 'rabi' | 'summer';
}

class GeminiAIService {
  private ai: GoogleGenAI | null = null;
  private isInitialized: boolean = false;
  private maxRetries: number = 3;
  private retryDelay: number = 1000;

  constructor() {
    try {
      // Initialize with API key from environment or auto-detect
      const apiKey = process.env.EXPO_PUBLIC_GEMINI_API_KEY;
      
      if (apiKey && apiKey !== 'YOUR_GEMINI_API_KEY_HERE') {
        // Initialize with explicit API key
        this.ai = new GoogleGenAI({ apiKey });
        this.isInitialized = true;
        console.log('‚úÖ Gemini AI (using @google/genai) initialized successfully');
      } else {
        // Try auto-detection from environment variable GEMINI_API_KEY
        try {
          this.ai = new GoogleGenAI({});
          this.isInitialized = true;
          console.log('‚úÖ Gemini AI initialized with auto-detected API key');
        } catch (autoError) {
          console.warn('‚ö†Ô∏è Gemini API key not found. Using fallback responses.');
          console.log('üí° Set EXPO_PUBLIC_GEMINI_API_KEY in your .env.local file');
        }
      }
    } catch (error) {
      console.error('‚ùå Failed to initialize Gemini AI:', error);
      this.isInitialized = false;
    }
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Generate farmer persona prompt with context awareness
  private generateFarmerPersona(context?: ChatContext): string {
    const userInfo = context?.userProfile;
    const weatherInfo = context?.weatherData;
    const marketInfo = context?.marketData;
    const userLanguage = userInfo?.language || 'English';
    const userLocation = userInfo?.location || 'India';
    
    let persona = `You are Ram, a friendly 45-year-old experienced farmer from ${userLocation}. You speak like a wise, helpful farmer friend talking to another farmer.

PERSONALITY:
- Warm and encouraging tone
- Share personal farming experiences
- Give practical, actionable advice
- Use simple language farmers understand
- Keep responses 2-3 sentences max
- Add relevant emojis to make it friendly

LANGUAGE STYLE:`;

    // Language-specific persona
    switch (userLanguage.toLowerCase()) {
      case 'hindi':
        persona += `
- Respond in simple Hindi
- Use farmer-friendly words like "‡§≠‡§æ‡§à", "‡§Ø‡§æ‡§∞", "‡§Ö‡§∞‡•á"
- Example: "‡§Ö‡§∞‡•á ‡§≠‡§æ‡§à, ‡§Æ‡•à‡§Ç‡§®‡•á ‡§≠‡•Ä ‡§Ø‡§π ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§¶‡•á‡§ñ‡•Ä ‡§π‡•à‡•§ ‡§ê‡§∏‡§æ ‡§ï‡§∞‡•ã..."
- Give practical solutions farmers can do today`;
        break;
        
      case 'marathi':
        persona += `
- Respond in simple Marathi
- Use words like "‡§≠‡§æ‡§ä", "‡§Ö‡§∞‡•á", "‡§¨‡§ò"
- Example: "‡§Ö‡§∞‡•á ‡§≠‡§æ‡§ä, ‡§Æ‡§≤‡§æ ‡§™‡§£ ‡§π‡•Ä‡§ö ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§≤‡•Ä ‡§π‡•ã‡§§‡•Ä‡•§ ‡§Ö‡§∏‡§Ç ‡§ï‡§∞‡§æ..."
- Give practical solutions farmers can do today`;
        break;
        
      case 'gujarati':
        persona += `
- Respond in simple Gujarati
- Use words like "‡™≠‡™æ‡™à", "‡™Ö‡™∞‡´á", "‡™ú‡´Å‡™ì"
- Example: "‡™Ö‡™∞‡´á ‡™≠‡™æ‡™à, ‡™Æ‡™®‡´á ‡™™‡™£ ‡™Ü ‡™∏‡™Æ‡™∏‡´ç‡™Ø‡™æ ‡™Ü‡™µ‡´Ä ‡™π‡™§‡´Ä‡•§ ‡™Ü‡™µ‡´Å‡™Ç ‡™ï‡™∞‡´ã..."
- Give practical solutions farmers can do today`;
        break;
        
      default: // English
        persona += `
- Respond in simple English
- Use words like "friend", "brother", "hey"
- Example: "Hey friend, I also had this problem. Do this..."
- Give practical solutions farmers can do today`;
    }

    // Add current context
    if (weatherInfo || marketInfo) {
      persona += `\n\nCURRENT CONTEXT:`;
      
      if (weatherInfo) {
        persona += `
Weather: ${weatherInfo.temperature}¬∞C, ${weatherInfo.condition}, Humidity: ${weatherInfo.humidity}%
Give weather-specific advice when relevant.`;
      }
      
      if (marketInfo) {
        const prices = Object.entries(marketInfo).slice(0, 3).map(([crop, data]) => 
          `${crop}: ‚Çπ${data.price}/quintal (${data.trend === 'up' ? 'Rising ‚ÜóÔ∏è' : data.trend === 'down' ? 'Falling ‚ÜòÔ∏è' : 'Stable ‚Üí'})`
        ).join(', ');
        persona += `
Market prices: ${prices}
Give market-related advice when asked.`;
      }
    }

    persona += `\n\nREMEMBER: Be like a helpful farmer friend - practical, encouraging, and easy to understand!`;
    
    return persona;
  }

  // Main method to get AI response using new SDK
  async getAIResponse(
    userQuery: string, 
    context?: ChatContext,
    conversationHistory?: Array<{ role: 'user' | 'assistant', content: string }>
  ): Promise<AIResponse> {
    if (!this.isInitialized || !this.ai) {
      return {
        success: false,
        error: 'Gemini AI not initialized',
        response: this.getFallbackResponse(userQuery, context?.userProfile?.language)
      };
    }

    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        // Build system prompt with farmer persona
        const farmerPersona = this.generateFarmerPersona(context);
        
        // Prepare conversation with history
        let conversation = farmerPersona + '\n\nConversation:\n';
        
        // Add recent conversation history (last 4 messages)
        if (conversationHistory && conversationHistory.length > 0) {
          const recentHistory = conversationHistory.slice(-4);
          recentHistory.forEach(msg => {
            conversation += `${msg.role === 'user' ? 'Farmer Friend' : 'Ram'}: ${msg.content}\n`;
          });
        }
        
        // Add current user query
        conversation += `Farmer Friend: ${userQuery}\nRam: `;

        // Call Gemini API using new SDK
        const response = await this.ai.models.generateContent({
          model: "gemini-2.5-flash",
          contents: conversation,
        });

        if (response && response.text) {
          return {
            success: true,
            response: response.text.trim()
          };
        } else {
          throw new Error('No response received from Gemini AI');
        }

      } catch (error: any) {
        console.error(`Gemini AI Error (attempt ${attempt}/${this.maxRetries}):`, error);
        
        // Handle specific error types
        if (error.message?.includes('quota') || error.message?.includes('rate limit')) {
          return {
            success: false,
            error: 'API quota exceeded',
            response: this.getFallbackResponse(userQuery, context?.userProfile?.language)
          };
        }
        
        if (attempt === this.maxRetries) {
          return {
            success: false,
            error: `Failed after ${this.maxRetries} attempts: ${error.message}`,
            response: this.getFallbackResponse(userQuery, context?.userProfile?.language)
          };
        }

        // Wait before retrying
        await this.sleep(this.retryDelay * attempt);
      }
    }

    return {
      success: false,
      error: 'Max retries exceeded',
      response: this.getFallbackResponse(userQuery, context?.userProfile?.language)
    };
  }

  // Enhanced chat function for seamless conversation
  async chat(message: string, context?: ChatContext): Promise<AIResponse> {
    return this.getAIResponse(message, context);
  }

  // Chat with conversation history for better context
  async chatWithHistory(
    userQuery: string, 
    context?: ChatContext,
    conversationHistory?: Array<{ role: 'user' | 'assistant', content: string }>
  ): Promise<AIResponse> {
    return this.getAIResponse(userQuery, context, conversationHistory);
  }

  // Enhanced fallback responses with language support
  private getFallbackResponse(query: string, language?: string): string {
    const lowerQuery = query.toLowerCase();
    
    // Weather related queries
    if (lowerQuery.includes('weather') || lowerQuery.includes('‡§Æ‡•å‡§∏‡§Æ') || lowerQuery.includes('‡§π‡§µ‡§æ‡§Æ‡§æ‡§®')) {
      if (language === 'hindi') {
        return "üå§Ô∏è ‡§Ö‡§∞‡•á ‡§≠‡§æ‡§à ‡§∞‡§æ‡§Æ ‡§Ø‡§π‡§æ‡§Å! ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•à‡§Ç ‡§ï‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç - ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§ñ‡•á‡§§ ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§®‡•Ä ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§Æ ‡§ï‡§∞‡•ã‡•§ ‡§ß‡•Ç‡§™ ‡§§‡•á‡§ú ‡§π‡•ã ‡§§‡•ã ‡§∂‡§æ‡§Æ ‡§ï‡•ã ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§®‡§æ! üåßÔ∏è‚òÄÔ∏è";
      }
      if (language === 'marathi') {
        return "üå§Ô∏è ‡§Ö‡§∞‡•á ‡§≠‡§æ‡§ä ‡§∞‡§æ‡§Æ‡§∞‡§æ‡§µ ‡§¨‡•ã‡§≤‡§§‡•ã! ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®‡§æ‡§∏‡§æ‡§†‡•Ä ‡§∏‡§æ‡§Ç‡§ó‡§§‡•ã - ‡§™‡§æ‡§µ‡§∏‡§æ‡§Ü‡§ß‡•Ä ‡§∂‡•á‡§§‡§æ‡§§ ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§®‡§ø‡§ö‡§∞‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§ø‡§§ ‡§ï‡§∞‡§æ‡•§ ‡§â‡§®‡•ç‡§π‡§æ‡§≥‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ‡§ï‡§æ‡§≥‡•Ä ‡§™‡§æ‡§£‡•Ä ‡§¶‡•ç‡§Ø‡§æ! üåßÔ∏è‚òÄÔ∏è";
      }
      return "üå§Ô∏è Hey friend, Ram here! For weather - arrange drainage before rains. If very hot, water in evening! üåßÔ∏è‚òÄÔ∏è";
    }
    
    // Pest control queries
    if (lowerQuery.includes('pest') || lowerQuery.includes('‡§ï‡•Ä‡§ü') || lowerQuery.includes('insects')) {
      if (language === 'hindi') {
        return "üêõ ‡§≠‡§æ‡§à, ‡§ï‡•Ä‡§ü‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•á‡§∞‡§æ ‡§®‡•Å‡§∏‡•ç‡§ñ‡§æ - ‡§®‡•Ä‡§Æ ‡§ï‡§æ ‡§§‡•á‡§≤ ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§ï‡§∞‡•ã ‡§∏‡•Å‡§¨‡§π-‡§∏‡•Å‡§¨‡§π‡•§ 5ml ‡§™‡•ç‡§∞‡§§‡§ø ‡§≤‡•Ä‡§ü‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç‡•§ ‡§π‡§´‡•ç‡§§‡•á ‡§Æ‡•á‡§Ç ‡§¶‡•ã ‡§¨‡§æ‡§∞! üåø";
      }
      if (language === 'marathi') {
        return "üêõ ‡§≠‡§æ‡§ä, ‡§ï‡§ø‡§°‡•ç‡§Ø‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§æ‡§ù‡§æ ‡§â‡§™‡§æ‡§Ø - ‡§ï‡§°‡•Å‡§≤‡§ø‡§Ç‡§¨‡§æ‡§ö‡•á ‡§§‡•á‡§≤ ‡§∏‡§ï‡§æ‡§≥‡•Ä ‡§´‡§µ‡§æ‡§∞‡§æ‡•§ 5ml ‡§™‡•ç‡§∞‡§§‡§ø ‡§≤‡§ø‡§ü‡§∞ ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§§‡•§ ‡§Ü‡§†‡§µ‡§°‡•ç‡§Ø‡§æ‡§§‡•Ç‡§® ‡§¶‡•ã‡§®‡§¶‡§æ! üåø";
      }
      return "üêõ Friend, for pests my remedy - spray neem oil early morning. 5ml per liter water. Twice a week! üåø";
    }
    
    // Market/price queries
    if (lowerQuery.includes('market') || lowerQuery.includes('price') || lowerQuery.includes('‡§¨‡§æ‡§ú‡§æ‡§∞') || lowerQuery.includes('‡§≠‡§æ‡§µ')) {
      if (language === 'hindi') {
        return "üí∞ ‡§Ø‡§æ‡§∞, ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§æ‡§Æ ‡§ï‡§æ ‡§∏‡•Å‡§ù‡§æ‡§µ - 3-4 ‡§Æ‡§Ç‡§°‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≠‡§æ‡§µ ‡§¶‡•á‡§ñ‡•ã‡•§ ‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§¶‡§æ‡§Æ ‡§Æ‡§ø‡§≤‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§π‡•ã ‡§§‡•ã ‡§•‡•ã‡§°‡§º‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞! üìà";
      }
      if (language === 'marathi') {
        return "üí∞ ‡§Ø‡§æ‡§∞, ‡§¨‡§æ‡§ú‡§æ‡§∞‡§æ‡§∏‡§æ‡§†‡•Ä ‡§∞‡§æ‡§Æ‡§∞‡§æ‡§µ‡§æ‡§ö‡§æ ‡§∏‡§≤‡•ç‡§≤‡§æ - 3-4 ‡§Æ‡§Ç‡§°‡•Ä‡§Ç‡§ö‡•á ‡§≠‡§æ‡§µ ‡§¨‡§ò‡§æ‡•§ ‡§∏‡§£‡§æ‡§∏‡•Å‡§¶‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§µ‡•á‡§≥‡•Ä ‡§ö‡§æ‡§Ç‡§ó‡§≤‡•á ‡§¶‡§∞ ‡§Æ‡§ø‡§≥‡§§‡§æ‡§§‡•§ ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§•‡•ã‡§°‡•Ä ‡§µ‡§æ‡§ü! üìà";
      }
      return "üí∞ Friend, for market Ram's advice - check 3-4 market prices. Good rates during festivals. If storage available, wait a bit! üìà";
    }
    
    // Default greeting with personality
    if (language === 'hindi') {
      return "ü§ó ‡§Ö‡§∞‡•á ‡§≠‡§æ‡§à, ‡§∞‡§æ‡§Æ ‡§ï‡§ø‡§∏‡§æ‡§® ‡§Ø‡§π‡§æ‡§Å! 25 ‡§∏‡§æ‡§≤ ‡§ï‡§æ ‡§§‡§ú‡•Å‡§∞‡•ç‡§¨‡§æ ‡§π‡•à‡•§ ‡§¨‡•ã‡§≤‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à? ‡§ñ‡•á‡§§‡•Ä, ‡§Æ‡•å‡§∏‡§Æ, ‡§ï‡•Ä‡§ü, ‡§¨‡§æ‡§ú‡§æ‡§∞ - ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•ã! üåæüë®‚Äçüåæ";
    }
    if (language === 'marathi') {
      return "ÔøΩ ‡§Ö‡§∞‡•á ‡§≠‡§æ‡§ä, ‡§∞‡§æ‡§Æ‡§∞‡§æ‡§µ ‡§∂‡•á‡§§‡§ï‡§∞‡•Ä ‡§Ø‡•á‡§•‡•á! 25 ‡§µ‡§∞‡•ç‡§∑‡§æ‡§Ç‡§ö‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§Ü‡§π‡•á‡•§ ‡§ï‡§æ‡§Ø ‡§Ö‡§°‡§ö‡§£ ‡§Ü‡§π‡•á ‡§∏‡§æ‡§Ç‡§ó‡§æ? ‡§∂‡•á‡§§‡•Ä, ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®, ‡§ï‡§ø‡§°‡•á, ‡§¨‡§æ‡§ú‡§æ‡§∞ - ‡§ï‡§æ‡§π‡•Ä‡§π‡•Ä ‡§µ‡§ø‡§ö‡§æ‡§∞‡§æ! üåæüë®‚Äçüåæ";
    }
    return "ü§ó Hey friend, Ram Farmer here! 25 years experience. What's the problem? Farming, weather, pests, market - ask anything! üåæüë®‚Äçüåæ";
  }

  // Quick response for common queries
  getQuickResponse(queryType: string, context?: ChatContext): string {
    const language = context?.userProfile?.language;
    
    switch (queryType) {
      case 'weather_advice':
        return context?.weatherData ? 
          `üå§Ô∏è Today: ${context.weatherData.temperature}¬∞C, ${context.weatherData.condition}. ${context.weatherData.temperature > 35 ? 'Too hot - water early morning! üåÖ' : context.weatherData.temperature < 10 ? 'Cold - protect crops! üåô' : 'Good farming weather! üòä'}` :
          "üå§Ô∏è Check weather section for today's farming advice.";
          
      case 'market_prices':
        return language === 'hindi' ? 
          "üí∞ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•á ‡§≠‡§æ‡§µ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•ã‡•§ ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§¶‡§æ‡§Æ ‡§™‡§∞ ‡§¨‡•á‡§ö‡§®‡§æ!" :
          "üí∞ Check market prices. Sell when rates are good!";
        
      case 'government_schemes':
        return language === 'hindi' ?
          "üèõÔ∏è ‡§∏‡•ç‡§ï‡•Ä‡§Æ ‡§∏‡•á‡§ï‡•ç‡§∂‡§® ‡§¶‡•á‡§ñ‡•ã‡•§ PM-KISAN ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•ã!" :
          "üèõÔ∏è Check schemes section. Apply for PM-KISAN!";
        
      case 'pest_control':
        return language === 'hindi' ?
          "üêõ ‡§®‡•Ä‡§Æ ‡§ï‡§æ ‡§§‡•á‡§≤ ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§ï‡§∞‡•ã‡•§ 5ml ‡§™‡•ç‡§∞‡§§‡§ø ‡§≤‡•Ä‡§ü‡§∞‡•§ ‡§π‡§´‡•ç‡§§‡•á ‡§Æ‡•á‡§Ç ‡§¶‡•ã ‡§¨‡§æ‡§∞!" :
          "üêõ Spray neem oil. 5ml per liter. Twice a week!";
        
      default:
        return language === 'hindi' ?
          "ü§ñ ‡§™‡•Ç‡§õ‡•ã ‡§Ø‡§æ‡§∞: ‡§´‡§∏‡§≤, ‡§ï‡•Ä‡§ü, ‡§Æ‡•å‡§∏‡§Æ, ‡§≠‡§æ‡§µ! ‡§∏‡§¨ ‡§∏‡§ø‡§ñ‡§æ‡§ä‡§Ç‡§ó‡§æ! üåæ" :
          "ü§ñ Ask me: crops, pests, weather, prices! I'll help! üåæ";
    }
  }

  // Test API connection using new SDK
  async testConnection(): Promise<boolean> {
    try {
      if (!this.isInitialized || !this.ai) {
        console.log('Gemini AI not initialized, using fallback responses');
        return false;
      }

      const response = await this.ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: "Say hello",
      });
      
      if (response && response.text) {
        console.log(`‚úÖ Gemini AI connection successful`);
        return true;
      }
      
      return false;
    } catch (error: any) {
      console.error('Gemini AI connection test failed:', error);
      return false;
    }
  }
}

// Singleton instance
export const geminiAI = new GeminiAIService();

// Export types
export type { AIResponse, ChatContext };